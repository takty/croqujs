{
	"!name": "libl",
	"TRACER": {
		"Tracer": {
			"!type": "fn()",
			"prototype": {
				"save": {
					"!type": "fn(step: number) -> !this"
				},
				"restore": {
					"!type": "fn(step: number) -> !this"
				},
				"go": {
					"!type": "fn(step: number) -> !this"
				},
				"forward": {
					"!type": "fn(step: number) -> !this"
				},
				"fd": {
					"!type": "fn(step: number) -> !this"
				},
				"back": {
					"!type": "fn(step: number) -> !this"
				},
				"bk": {
					"!type": "fn(step: number) -> !this"
				},
				"backward": {
					"!type": "fn(step: number) -> !this"
				},
				"turnRight": {
					"!type": "fn(deg: number) -> !this"
				},
				"turnLeft": {
					"!type": "fn(deg: number) -> !this"
				},
				"tr": {
					"!type": "fn(step: number) -> !this"
				},
				"tl": {
					"!type": "fn(step: number) -> !this"
				},
				"right": {
					"!type": "fn(step: number) -> !this"
				},
				"left": {
					"!type": "fn(step: number) -> !this"
				},
				"rt": {
					"!type": "fn(step: number) -> !this"
				},
				"lt": {
					"!type": "fn(step: number) -> !this"
				},
				"x": {
					"!type": "fn(val: number) -> !this|number"
				},
				"y": {
					"!type": "fn(val: number) -> !this|number"
				},
				"direction": {
					"!type": "fn(deg: number) -> !this|number"
				},
				"heading": {
					"!type": "fn(deg: number) -> !this"
				},
				"moveTo": {
					"!type": "fn(x: number, y: number, dir?: number) -> !this"
				},
				"gatherTo": {
					"!type": "fn(turtle: +TURTLE.Turtle) -> !this"
				},
				"home": {
					"!type": "fn() -> !this"
				},
				"setHome": {
					"!type": "fn() -> !this"
				},
				"curveRight": {
					"!type": "fn(step0: number, deg: number, step1: number, deg?: number, step?: number) -> !this"
				},
				"curveLeft": {
					"!type": "fn(step0: number, deg: number, step1: number, deg?: number, step?: number) -> !this"
				},
				"cr": {
					"!type": "fn(step0: number, deg: number, step1: number, deg?: number, step?: number) -> !this"
				},
				"cl": {
					"!type": "fn(step0: number, deg: number, step1: number, deg?: number, step?: number) -> !this"
				},
				"arcRight": {
					"!type": "fn(r: ?, deg: ?) -> !this"
				},
				"arcLeft": {
					"!type": "fn(r: ?, deg: ?) -> !this"
				},
				"ar": {
					"!type": "fn(r: ?, deg: ?) -> !this"
				},
				"al": {
					"!type": "fn(r: ?, deg: ?) -> !this"
				},
				"step": {
					"!type": "fn(val: number) -> !this|number"
				},
				"unit": {
					"!type": "fn(val: number) -> !this|number"
				},
				"edge": {
					"!type": "fn(func: fn(?)) -> !this|fn(?)"
				},
				"getDirectionOf": {
					"!type": "fn(x: number, y: number) -> number"
				},
				"towards": {
					"!type": "fn(x: number, y: number) -> number"
				},
				"doLater": {
					"!type": "fn(func: fn(?), args_array?: [?]) -> !this"
				},
				"doNow": {
					"!type": "fn(func: fn(?), args_array?: [?]) -> !this"
				},
				"stepNext": {
					"!type": "fn(num: number)"
				},
				"update": {
					"!type": "fn(x: number, y: number, dir: number, unitTime: number) -> [number]"
				},
				"cancel": {
					"!type": "fn() -> !this"
				},
				"stop": {
					"!type": "fn() -> !this"
				}
			}
		}
	}
}
