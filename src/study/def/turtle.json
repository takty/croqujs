{
	"!name": "libl",
	"TURTLE": {
		"Turtle": {
			"!type": "fn(context: ?, normalDeg: number)",
			"prototype": {
				"makeChild": {
					"!type": "fn() -> +TURTLE.Turtle"
				},
				"save": {
					"!type": "fn(step: number) -> !this"
				},
				"restore": {
					"!type": "fn(step: number) -> !this"
				},
				"go": {
					"!type": "fn(step: number) -> !this"
				},
				"forward": {
					"!type": "fn(step: number) -> !this"
				},
				"fd": {
					"!type": "fn(step: number) -> !this"
				},
				"back": {
					"!type": "fn(step: number) -> !this"
				},
				"bk": {
					"!type": "fn(step: number) -> !this"
				},
				"backward": {
					"!type": "fn(step: number) -> !this"
				},
				"turnRight": {
					"!type": "fn(deg: number) -> !this"
				},
				"turnLeft": {
					"!type": "fn(deg: number) -> !this"
				},
				"tr": {
					"!type": "fn(step: number) -> !this"
				},
				"tl": {
					"!type": "fn(step: number) -> !this"
				},
				"right": {
					"!type": "fn(step: number) -> !this"
				},
				"left": {
					"!type": "fn(step: number) -> !this"
				},
				"rt": {
					"!type": "fn(step: number) -> !this"
				},
				"lt": {
					"!type": "fn(step: number) -> !this"
				},
				"x": {
					"!type": "fn(val: number) -> !this|number"
				},
				"y": {
					"!type": "fn(val: number) -> !this|number"
				},
				"direction": {
					"!type": "fn(deg: number) -> !this|number"
				},
				"heading": {
					"!type": "fn(deg: number) -> !this"
				},
				"moveTo": {
					"!type": "fn(x: number, y: number, dir?: number) -> !this"
				},
				"gatherTo": {
					"!type": "fn(turtle: +TURTLE.Turtle) -> !this"
				},
				"home": {
					"!type": "fn() -> !this"
				},
				"setHome": {
					"!type": "fn() -> !this"
				},
				"curveRight": {
					"!type": "fn(step0: number, deg: number, step1: number, deg?: number, step?: number) -> !this"
				},
				"curveLeft": {
					"!type": "fn(step0: number, deg: number, step1: number, deg?: number, step?: number) -> !this"
				},
				"cr": {
					"!type": "fn(step0: number, deg: number, step1: number, deg?: number, step?: number) -> !this"
				},
				"cl": {
					"!type": "fn(step0: number, deg: number, step1: number, deg?: number, step?: number) -> !this"
				},
				"arcRight": {
					"!type": "fn(r: ?, deg: ?) -> !this"
				},
				"arcLeft": {
					"!type": "fn(r: ?, deg: ?) -> !this"
				},
				"ar": {
					"!type": "fn(r: ?, deg: ?) -> !this"
				},
				"al": {
					"!type": "fn(r: ?, deg: ?) -> !this"
				},
				"step": {
					"!type": "fn(val: number) -> !this|number"
				},
				"unit": {
					"!type": "fn(val: number) -> !this|number"
				},
				"edge": {
					"!type": "fn(func: fn(?)) -> !this|fn(?)"
				},
				"getDirectionOf": {
					"!type": "fn(x: number, y: number) -> number"
				},
				"towards": {
					"!type": "fn(x: number, y: number) -> number"
				},
				"getDirectionOfHome": {
					"!type": "fn() -> number"
				},
				"getDistanceTo": {
					"!type": "fn(x: number, y: number) -> number"
				},
				"getDistanceToHome": {
					"!type": "fn() -> number"
				},
				"visible": {
					"!type": "fn(val: bool) -> !this|bool"
				},
				"stepNext": {
					"!type": "fn(num: number)"
				},
				"resetAnimation": {
					"!type": "fn()"
				},
				"dot": {
					"!type": "fn() -> !this"
				},
				"circle": {
					"!type": "fn(r: ?, deg?: ?, anticlockwise?: bool) -> !this"
				},
				"image": {
					"!type": "fn(image: ?, cx: number, cy: number, scale?: number)"
				},
				"penUp": {
					"!type": "fn() -> !this"
				},
				"penDown": {
					"!type": "fn() -> !this"
				},
				"pu": {
					"!type": "fn() -> !this"
				},
				"pd": {
					"!type": "fn() -> !this"
				},
				"up": {
					"!type": "fn() -> !this"
				},
				"down": {
					"!type": "fn() -> !this"
				},
				"pen": {
					"!type": "fn(val?: bool) -> !this|bool"
				},
				"mode": {
					"!type": "fn(val?: string) -> !this|string"
				},
				"stroke": {
					"!type": "fn(stroke?: +STYLE.Stroke) -> !this|+STYLE.Stroke"
				},
				"fill": {
					"!type": "fn(fill?: +STYLE.Fill) -> !this|+STYLE.Fill"
				},
				"context": {
					"!type": "fn() -> ?"
				},
				"localize": {
					"!type": "fn()"
				},
				"scale": {
					"!type": "fn(rate: number)"
				}
			}
		},
		"makeStamp": {
			"!type": "fn(width: number, height: number, cx: number, cy: number, scale: number, func: fn(?)) -> fn(t: TURTLE.Turtle, var_args: ?)"
		}
	}
}
