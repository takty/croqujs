{
	"!name": "libl",
	"CALC": {
		"createGenerator": {
			"!type": "fn(seed: number) -> fn()"
		},
		"Dice": {
			"!type": "fn()",
			"prototype": {
				"reset": {
					"!type": "fn()"
				},
				"save": {
					"!type": "fn()"
				},
				"restore": {
					"!type": "fn()"
				},
				"random": {
					"!type": "fn(min: number, max: number, fn?: fn(val: number)) -> number"
				},
				"rand": {
					"!type": "fn(n_min: number, max?: number) -> number"
				},
				"isLikely": {
					"!type": "fn(percent: number) -> bool"
				}
			}
		},
		"setRandomSeed": {
			"!type": "fn(seed: number)"
		},
		"resetRandomSeed": {
			"!type": "fn()"
		},
		"saveRandomState": {
			"!type": "fn()"
		},
		"restoreRandomState": {
			"!type": "fn()"
		},
		"random": {
			"!type": "fn(min: number, max: number, fn?: fn(val: number)) -> number"
		},
		"rand": {
			"!type": "fn(n_min: number, max?: number) -> number"
		},
		"isLikely": {
			"!type": "fn(percent: number) -> bool"
		},
		"constrain": {
			"!type": "fn(val: number, min: number, max: number, type: string) -> number"
		},
		"map": {
			"!type": "fn(val: number, from1: number, to1: number, from2: number, to2: number, fn?: fn(val: number)) -> number"
		},
		"easingRandom": {
			"!type": "fn(min: number, max: number, fn: fn(val: number)) -> number"
		},
		"easingMap": {
			"!type": "fn(val: number, from1: number, to1: number, from2: number, to2: number, fn: fn(val: number)) -> number"
		},
		"linear": {
			"!type": "fn(t: number) -> number"
		},
		"easeInSine": {
			"!type": "fn(t: number) -> number"
		},
		"easeOutSine": {
			"!type": "fn(t: number) -> number"
		},
		"easeInOutSine": {
			"!type": "fn(t: number) -> number"
		},
		"easeInQuad": {
			"!type": "fn(t: number) -> number"
		},
		"easeOutQuad": {
			"!type": "fn(t: number) -> number"
		},
		"easeInOutQuad": {
			"!type": "fn(t: number) -> number"
		},
		"easeInCubic": {
			"!type": "fn(t: number) -> number"
		},
		"easeOutCubic": {
			"!type": "fn(t: number) -> number"
		},
		"easeInOutCubic": {
			"!type": "fn(t: number) -> number"
		},
		"easeInQuart": {
			"!type": "fn(t: number) -> number"
		},
		"easeOutQuart": {
			"!type": "fn(t: number) -> number"
		},
		"easeInOutQuart": {
			"!type": "fn(t: number) -> number"
		},
		"easeInQuint": {
			"!type": "fn(t: number) -> number"
		},
		"easeOutQuint": {
			"!type": "fn(t: number) -> number"
		},
		"easeInOutQuint": {
			"!type": "fn(t: number) -> number"
		},
		"easeInExpo": {
			"!type": "fn(t: number) -> number"
		},
		"easeOutExpo": {
			"!type": "fn(t: number) -> number"
		},
		"easeInOutExpo": {
			"!type": "fn(t: number) -> number"
		},
		"easeInCirc": {
			"!type": "fn(t: number) -> number"
		},
		"easeOutCirc": {
			"!type": "fn(t: number) -> number"
		},
		"easeInOutCirc": {
			"!type": "fn(t: number) -> number"
		}
	}
}
